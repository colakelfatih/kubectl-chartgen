# Example Helm Values generated by kubectl-chartgen
# This file shows the expected output format with mock data

# Frontend Application
frontend:
  replicas: 2
  image:
    repository: myapp/frontend
    tag: "1.2.3"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      - 80
      - 443
  environment:
    NODE_ENV: production
    API_URL: https://api.example.com
    CDN_URL: https://cdn.example.com
    GA_TRACKING_ID: GA-123456789
    REDIS_URL: redis://redis:6379
  ingress:
    enabled: true
    host: app.example.com
    hosts:
      - app.example.com
      - www.example.com
    targetPort: 80
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  volumes:
    - name: config-volume
      type: configMap
    - name: static-files
      type: persistentVolumeClaim
  volumeMounts:
    - name: config-volume
      mountPath: /app/config
    - name: static-files
      mountPath: /app/public/uploads

---

# Backend API Service
backend:
  replicas: 3
  image:
    repository: myapp/backend
    tag: "2.1.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      - 8080
  environment:
    DATABASE_URL: postgresql://postgres:5432/myapp
    REDIS_URL: redis://redis:6379
    JWT_SECRET: your-super-secret-jwt-key
    SMTP_HOST: smtp.gmail.com
    SMTP_PORT: "587"
    AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
    AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    AWS_S3_BUCKET: myapp-uploads
    LOG_LEVEL: info
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "500m"
      memory: "512Mi"

---

# Database Service
database:
  replicas: 1
  image:
    repository: postgres
    tag: "13.4"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      - 5432
  environment:
    POSTGRES_DB: myapp
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: your-secure-password
    POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
  volumes:
    - name: postgres-data
      type: persistentVolumeClaim
  volumeMounts:
    - name: postgres-data
      mountPath: /var/lib/postgresql/data

---

# Redis Cache Service
redis:
  replicas: 1
  image:
    repository: redis
    tag: "6.2-alpine"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      - 6379
  environment:
    REDIS_PASSWORD: your-redis-password
  volumes:
    - name: redis-data
      type: persistentVolumeClaim
  volumeMounts:
    - name: redis-data
      mountPath: /data

---

# Worker Service (no service/ingress)
worker:
  replicas: 2
  image:
    repository: myapp/worker
    tag: "2.1.0"
    pullPolicy: IfNotPresent
  environment:
    DATABASE_URL: postgresql://postgres:5432/myapp
    REDIS_URL: redis://redis:6379
    AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
    AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    QUEUE_NAME: email-queue
    MAX_RETRIES: "3"
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"

---

# Monitoring Service
monitoring:
  replicas: 1
  image:
    repository: prom/prometheus
    tag: "v2.30.3"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      - 9090
  environment:
    PROMETHEUS_CONFIG: /etc/prometheus/prometheus.yml
  ingress:
    enabled: true
    host: monitoring.example.com
    hosts:
      - monitoring.example.com
    targetPort: 9090
  volumes:
    - name: prometheus-config
      type: configMap
    - name: prometheus-data
      type: persistentVolumeClaim
  volumeMounts:
    - name: prometheus-config
      mountPath: /etc/prometheus
    - name: prometheus-data
      mountPath: /prometheus

---

# Load Balancer Service
loadbalancer:
  replicas: 1
  image:
    repository: nginx
    tag: "1.21-alpine"
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    ports:
      - 80
      - 443
  environment:
    NGINX_CONFIG: /etc/nginx/nginx.conf
  ingress:
    enabled: true
    host: lb.example.com
    hosts:
      - lb.example.com
    targetPort: 80
  volumes:
    - name: nginx-config
      type: configMap
    - name: ssl-certs
      type: secret
  volumeMounts:
    - name: nginx-config
      mountPath: /etc/nginx/conf.d
    - name: ssl-certs
      mountPath: /etc/ssl/certs 